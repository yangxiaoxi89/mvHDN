#
edge_fusion_incluster = edge_fusion_temp[which(edge_fusion_temp[,8]==edge_fusion_temp[,9]),]
edge_fusion_outcluster = edge_fusion_temp[which(edge_fusion_temp[,8]!=edge_fusion_temp[,9]),]
edge_fusion_incluster[,c(8,9)] = as.numeric(edge_fusion_incluster[,c(8,9)])
edge_fusion_outcluster[,c(8,9)] = as.numeric(edge_fusion_outcluster[,c(8,9)])
statistics
edge_fusion_incluster_order = edge_fusion_incluster[order(edge_fusion_incluster[,8]),]
edge_fusion_incluster_order1 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==1),]
edge_fusion_incluster_order2 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==2),]
edge_fusion_incluster_order3 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==3),]
edge_fusion_incluster_order4 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==4),]
edge_fusion_incluster_order5 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==5),]
edge_fusion_incluster_order6 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==6),]
edge_fusion_incluster_order7 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==7),]
edge_fusion_incluster_order8 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==8),]
edge_fusion_incluster_order9 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==9),]
edge_fusion_incluster_order10 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==10),]
edge_fusion_incluster_order11 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==11),]
edge_fusion_incluster_order12 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==12),]
edge_fusion_incluster_order13 = as.matrix(edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==13),])
edge_fusion_incluster_order13 = t(edge_fusion_incluster_order13)
edge_fusion_incluster_order14 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==14),]
edge_fusion_incluster_order15 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==15),]
edge_fusion_incluster_order16 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==16),]
edge_fusion_incluster_order17 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==17),]
edge_fusion_incluster_order18 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==18),]
edge_fusion_incluster_order19 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==19),]
edge_fusion_incluster_order20 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==20),]
edge_fusion_incluster_order21 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==21),]
edge_fusion_incluster_order22 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==22),]
edge_fusion_incluster_order23 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==23),]
edge_fusion_incluster_order24 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==24),]
#heatmap
edge_fusion_incluster_order[,c(8,9)] = as.numeric(edge_fusion_incluster_order[,c(8,9)])
cluster_hierarchy = matrix(data = NA, nrow = 24, ncol = 6)
rownames(cluster_hierarchy) = paste("cluster", 1:24, sep = "")
colnames(cluster_hierarchy) = paste("hierarchy", 1:6, sep = "")
for (i in 1:24)
{
for (j in 1:6)
{
cluster_hierarchy[i,j]=length(which(edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==i),7]=="1"))
cluster_hierarchy[i,2]=length(which(edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==i),7]=="2"))
cluster_hierarchy[i,3]=length(which(edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==i),7]=="3"))
cluster_hierarchy[i,4]=length(which(edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==i),7]=="4"))
cluster_hierarchy[i,5]=length(which(edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==i),7]=="5"))
cluster_hierarchy[i,6]=length(which(edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==i),7]=="6"))
}
}
#
temp2 = matrix(data = NA, nrow = 24, ncol = 1)
cluster_hierarchy_percent = cbind(cluster_hierarchy, temp2)
rm(temp2)
cluster_hierarchy_percent[,7] = rowSums(cluster_hierarchy)
for (i in 1:24)
{
for (j in 1:6)
{
cluster_hierarchy_percent[i,j]=round(cluster_hierarchy_percent[i,j]/cluster_hierarchy_percent[i,7]*100,2)
}
}
View(cluster_hierarchy_percent)
cluster_hierarchy_percent = cluster_hierarchy_percent[,-7]
View(cluster_hierarchy_percent)
write.table(cluster_hierarchy_percent,file = "disease_hierarchy_percentage.txt",quote = F,sep = "\t",row.names = T,col.names = T)
library(pheatmap)
pheatmap(t(cluster_hierarchy_percent),cluster_cols=F,color = colorRampPalette(c("white", "firebrick3"))(50),cluster_rows=F,border_color="grey60",fontsize=10,show_rownames = T,show_colnames = T)
load("disease_matrixs—v3.rdata")
library(SNFtool)
library(clValid)
library(pheatmap)
library(plotrix)
library(xlsx)
neighbor_num=7#number of neighbors, usually (10~30),20 default.
alpha=0.5#hyperparameter, usually (0.3~0.8),0.5 default.
iteration_num=20#Number of Iterations, usually (10~20), 20 default.
rownames(GOsim_sci2015)=rownames(sim_natcom2014)
colnames(GOsim_sci2015)=colnames(sim_natcom2014)
rownames(dist_sci2015)=rownames(sim_natcom2014)
colnames(dist_sci2015)=colnames(sim_natcom2014)
###Compute the affinity matrix####
affini_list=NULL
affini_list=c(affini_list,list(affinityMatrix(dist_sci2015,neighbor_num, alpha)))
affini_list=c(affini_list,list(affinityMatrix(1-GOsim_sci2015,neighbor_num, alpha)))
affini_list=c(affini_list,list(affinityMatrix(1-sim_natcom2014,neighbor_num, alpha)))
####SNF fusion####
fusion_result = SNF(affini_list, neighbor_num, iteration_num)#similarity matrix of data_result(after the SNF calculation) for heatmap
rownames(fusion_result)=rownames(dist_sci2015)
colnames(fusion_result)=rownames(dist_sci2015)
cor_matrix=matrix(data = 1,nrow = 4,ncol = 4)
rownames(cor_matrix)=c("dist_sci2015","GOsim_sci2015","sim_natcom2014","fusion")
colnames(cor_matrix)=rownames(cor_matrix)
# the correlation between the matrices
for (i in 1:3)
{
for (j in 1:3)
{
cor_matrix[i,j]=cor(as.vector(affini_list[[i]]),as.vector(affini_list[[j]]))
}
}
cor_matrix[1,4]=cor(as.vector(affini_list[[1]]),as.vector(fusion_result))
cor_matrix[2,4]=cor(as.vector(affini_list[[2]]),as.vector(fusion_result))
cor_matrix[3,4]=cor(as.vector(affini_list[[3]]),as.vector(fusion_result))
cor_matrix[4,1]=cor_matrix[1,4]
cor_matrix[4,2]=cor_matrix[2,4]
cor_matrix[4,3]=cor_matrix[3,4]
####the cluster number with spectral clustering###
connectivity_num=NULL
dunn_num=NULL
for (i in 2:40)
{
cluster_group =spectralClustering(fusion_result,i)
connectivity_num=c(connectivity_num,connectivity(distance = 1-fusion_result,clusters = cluster_group))
dunn_num=c(dunn_num,dunn(distance = 1-fusion_result,clusters = cluster_group))
}
twoord.plot(lx=c(2:40),ly=connectivity_num,rx=c(2:40),ry=dunn_num
,xlim = c(1,40),lylim = c(40,220),rylim = c(0.74,0.94),lcol = "red",rcol = "blue"
,xlab = "Cluster Number",ylab = "Connectivity Index",rylab = "Dunn Index"
,main = "Cluster Validity",type = c("line","line"),lwd=2)
#,do.first = 'plot_bg(col = \'gray\'); grid(col = \'white\', lty = 2)')
#the cluster number = 24，connectivity = 160.06270,dunn = 0.9232009
cluster_group =spectralClustering(fusion_result,24)
order_fusion_result=fusion_result[order(cluster_group),order(cluster_group)]
temp=order_fusion_result-diag(diag(order_fusion_result))
temp=temp/max(temp)+diag(nrow(order_fusion_result))
####heatmap####
Mesh_disease=read.xlsx(file = "MeshDiseaseName_total223.xlsx",sheetIndex = 1)
disease_slim_temp=as.matrix(read.xlsx(file = "Mesh_disease_slim.xlsx",sheetIndex = 1))
disease_slim=NULL
for (i in 1:nrow(disease_slim_temp))
{
disease_slim=c(disease_slim,list(unique(disease_slim_temp[i,which(!is.na(disease_slim_temp[i,]))])))
}
rm(disease_slim_temp)
for (i in 1:24)
{
num=which(cluster_group==i)
cluster_disease_temp=NULL
for (j in 1:length(num))
{
cluster_disease_temp=c(cluster_disease_temp,disease_slim[[num[j]]])
}
cluster_sta=table(cluster_disease_temp)
max_nam=names(cluster_sta)[which(cluster_sta==max(cluster_sta))]
for (j in 1:length(num))
{
if(length(disease_slim[[num[j]]])>1)
{
num1=which(disease_slim[[num[j]]]==max_nam)
if (length(num1)==1)
{
disease_slim[[num[j]]]=max_nam
}else
{
disease_slim[[num[j]]]=disease_slim[[num[j]]][1]
}
rm(num1)
}
}
rm(num)
rm(max_nam)
rm(cluster_disease_temp)
rm(cluster_sta)
}
disease_slim[[23]]="C17"
disease_slim[[32]]="C10"
disease_slim[[93]]="C13"
disease_slim[[179]]="C13"
disease_slim[[205]]="C10"
truelabel=unlist(disease_slim)
rm(disease_slim)
###annotation##
#t
truelabel_mapping=matrix(data = NA,nrow = length(unique(truelabel)),ncol = 2)
truelabel_mapping[,1]=unique(sort(truelabel))
truelabel_mapping[,2]=1:length(unique(truelabel))
truelabel_temp=matrix(data = 0,nrow = length(truelabel),ncol = 1)
for (i in 1:length(truelabel))
{
truelabel_temp[i,1]=as.numeric(truelabel_mapping[which(truelabel_mapping[,1]==truelabel[i]),2])
}
truelabel=truelabel_temp
rm(truelabel_temp)
truelabel_colors=c("bisque","springgreen2","burlywood","cadetblue","chartreuse","chocolate","coral","cornsilk","firebrick","dimgrey","gold","maroon3","hotpink","khaki","lightblue","skyblue","green")
truelabel_mapping=cbind(truelabel_mapping,truelabel_colors)
cluster_group_colors=c("bisque","springgreen2","burlywood","cadetblue","chartreuse","chocolate","coral","cornsilk","firebrick","dimgrey","gold","maroon3","hotpink","khaki","lightblue","skyblue","green","pink","yellow","orange","red","papayawhip","violet","purple")
truelabel_mapping=cbind(truelabel_mapping,as.matrix(read.xlsx(file = "Mesh_ID_map.xlsx",sheetIndex = 1))[,2])
colnames(truelabel_mapping)[4]="Name"
#
M_label=cbind(cluster_group,truelabel)
colnames(M_label)=c("spectralClustering","TrueLabel")
#M_label_colors=t(apply(M_label,1,getColorsForGroups))
#cl <- colors()
M_label_colors=cbind("spectralClustering"=getColorsForGroups(M_label[,"spectralClustering"],colors=cluster_group_colors),
"TrueLabel"=getColorsForGroups(M_label[,"TrueLabel"],colors=truelabel_colors))
displayClustersWithHeatmap(fusion_result, cluster_group, M_label_colors,col=colorRampPalette(c("aliceblue","navy"))(1000),margins = c(10,10),cexRow=0.3,cexCol = 0.3)
displayClustersWithHeatmap(affini_list[[1]], cluster_group, M_label_colors,col=colorRampPalette(c("aliceblue","navy"))(1000),margins = c(10,10),cexRow=0.3,cexCol = 0.3)
displayClustersWithHeatmap(affini_list[[2]], cluster_group, M_label_colors,col=colorRampPalette(c("aliceblue","navy"))(1000),margins = c(10,10),cexRow=0.3,cexCol = 0.3)
displayClustersWithHeatmap(affini_list[[3]], cluster_group, M_label_colors,col=colorRampPalette(c("aliceblue","navy"))(1000),margins = c(10,10),cexRow=0.3,cexCol = 0.3)
####Contribution of data####
contribution_matrix=fusion_result
contribution_matrix[which(contribution_matrix!=0)]=0
for (i in 1:nrow(contribution_matrix))
{
for (j in i:nrow(contribution_matrix))
{
if (j!=i)
{
temp=matrix(data = 0,nrow = 3,ncol = 1)
temp[1]=affini_list[[1]][i,j]
temp[2]=affini_list[[2]][i,j]
temp[3]=affini_list[[3]][i,j]
rank_temp=order(-temp)
temp=temp[rank_temp]
chazhi=(temp[1]-temp[2])/temp[2]
chazhi=c(chazhi,(temp[2]-temp[3])/temp[3])
num=length(which(chazhi<=0.1))
if (chazhi[1]>0.1)
{
contribution_matrix[i,j]=rank_temp[1]
}else
{
if (chazhi[2]>0.1)
{
a=c(rank_temp[1],rank_temp[2])
if (length(intersect(a,c(1,2)))==2)
{
contribution_matrix[i,j]=4
}
if (length(intersect(a,c(1,3)))==2)
{
contribution_matrix[i,j]=5
}
if (length(intersect(a,c(2,3)))==2)
{
contribution_matrix[i,j]=6
}
}else
{
contribution_matrix[i,j]=7
}
}
#rm(chazhi)
#rm(temp)
#rm(rank_temp)
}
}
}
contribution_sta=table(contribution_matrix[which(contribution_matrix!=0)])
View(contribution_matrix)
contribution_sta
#
contribution_matrix_group_list=NULL
contribution_sta_group_list=NULL
#
contribution_matrix_group_list=NULL
contribution_sta_group_list=NULL
for (i in 1:24)
{
contribution_matrix_group_temp=contribution_matrix[which(cluster_group==i),which(cluster_group==i)]
contribution_sta_group_list=c(contribution_sta_group_list,list(table(contribution_matrix_group_temp[which(contribution_matrix_group_temp!=0)])))
contribution_matrix_group_list=c(contribution_matrix_group_list,list(contribution_matrix_group_temp))
rm(contribution_matrix_group_temp)
}
########
node=matrix(data = NA,nrow = nrow(fusion_result),ncol = 5)
node[,1:3]=as.matrix(Mesh_disease[,c(1,3,10)])
node[,4]=truelabel
node[,5]=cluster_group
colnames(node)=c("Name","DiseaseID","SlimMappings","Truelabel","Cluster_group")
edge_fusion=matrix(data = NA,nrow = nrow(fusion_result)*(nrow(fusion_result)-1)/2,ncol = 4) #223*222/2
edge_sci2015=matrix(data = NA,nrow = nrow(fusion_result)*(nrow(fusion_result)-1)/2,ncol = 3)
edge_sci2015GO=edge_sci2015
edge_nc2014=edge_sci2015
k=1
for (i in 1:nrow(fusion_result))
{
for (j in i:nrow(fusion_result))
{
if (j!=i)
{
edge_fusion[k,1]=rownames(fusion_result)[i]
edge_fusion[k,2]=rownames(fusion_result)[j]
edge_fusion[k,3]=fusion_result[i,j]
edge_fusion[k,4]=contribution_matrix[i,j]
edge_sci2015[k,1]=rownames(fusion_result)[i]
edge_sci2015[k,2]=rownames(fusion_result)[j]
edge_sci2015[k,3]=affini_list[[1]][i,j]
edge_sci2015GO[k,1]=rownames(fusion_result)[i]
edge_sci2015GO[k,2]=rownames(fusion_result)[j]
edge_sci2015GO[k,3]=affini_list[[2]][i,j]
edge_nc2014[k,1]=rownames(fusion_result)[i]
edge_nc2014[k,2]=rownames(fusion_result)[j]
edge_nc2014[k,3]=affini_list[[3]][i,j]
k=k+1
}
}
}
x=as.numeric(edge_fusion[,3])
x1=as.numeric(edge_sci2015[,3])
x2=as.numeric(edge_sci2015GO[,3])
x3=as.numeric(edge_nc2014[,3])
load("fusion_v3.0.RData")
contribution=matrix(data = 0,nrow = 4,ncol = 7)
rownames(contribution)=c("Inside Clusters","Between Clusters","Total","Inside Ratio")
colnames(contribution)=c(1:7)
contribution[3,]=c(15120,6213,812,2335,194,39,40 )
#inner edges
for (i in 1:length(contribution_sta_group_list))
{
for (j in 1:7)
{
num=which(names(contribution_sta_group_list[[i]])==j)
if (length(num)>0)
{
contribution[1,j]=contribution[1,j]+contribution_sta_group_list[[i]][num]
}
}
}
#ratios
for (i in 1:7)
{
contribution[2,i]=contribution[3,i]-contribution[1,i]
contribution[4,i]=contribution[1,i]/contribution[3,i]
}
#### contribution heatmap####
library(pheatmap)
contribution_heatmap=matrix(data = 0,nrow = 7,ncol = length(contribution_sta_group_list))
for (i in 1:length(contribution_sta_group_list))
{
for (j in 1:7)
{
num=which(names(contribution_sta_group_list[[i]])==j)
if (length(num)>0)
{
contribution_heatmap[j,i]=contribution_sta_group_list[[i]][num]
}
}
}
temp=colSums(contribution_heatmap)
for(i in 1:nrow(contribution_heatmap))
{
for (j in 1:ncol(contribution_heatmap))
{
contribution_heatmap[i,j]=contribution_heatmap[i,j]/temp[j]
}
}
rownames(contribution_heatmap)=paste("Contribution",1:7,sep = "")
colnames(contribution_heatmap)=paste("Cluster",1:24,sep = "")
pheatmap(contribution_heatmap,cluster_cols=F,color = colorRampPalette(c("white", "firebrick3"))(50),cluster_rows=F,border_color="grey60",fontsize=10,show_rownames = T,show_colnames = T)
load("edge.RData")
library(xlsx)
x=as.numeric(edge_fusion[,3])
edge_fusion_temp = edge_fusion[which(x>=quantile(x,probs = 0.9)),]
TreeNumbers_disease = read.xlsx(file = "Truelabel_TreeNumbers.xlsx",sheetIndex = 1)
TreeNumbers_disease = apply(TreeNumbers_disease, 2, as.character)
temp = matrix(data = NA, nrow = nrow(edge_fusion_temp), ncol = 3)
edge_fusion_temp = cbind(edge_fusion_temp, temp)
rm(temp)
#
for (i in 1:nrow(edge_fusion_temp))
{
for (j in 1:223)
{
if(edge_fusion_temp[i,1]==TreeNumbers_disease[j,1])
{
edge_fusion_temp[i,5]=TreeNumbers_disease[j,3]
}
}
}
#
for (m in 1:nrow(edge_fusion_temp))
{
for (n in 1:223)
{
if(edge_fusion_temp[m,2]==TreeNumbers_disease[n,1])
{
edge_fusion_temp[m,6]=TreeNumbers_disease[n,3]
}
}
}
rm(i,j,m,n)
#hierarchical analysis
for (k in 1:nrow(edge_fusion_temp))
{
if(substr(edge_fusion_temp[k,5],1,3)!=substr(edge_fusion_temp[k,6],1,3))
{
edge_fusion_temp[k,7]=1
}else
{
if(substr(edge_fusion_temp[k,5],5,7)!=substr(edge_fusion_temp[k,6],5,7))
{
edge_fusion_temp[k,7]=2
}else
{
if(substr(edge_fusion_temp[k,5],9,11)!=substr(edge_fusion_temp[k,6],9,11))
{
edge_fusion_temp[k,7]=3
}else
{
if(substr(edge_fusion_temp[k,5],13,15)!=substr(edge_fusion_temp[k,6],13,15))
{
edge_fusion_temp[k,7]=4
}else
{
if(substr(edge_fusion_temp[k,5],17,19)!=substr(edge_fusion_temp[k,6],17,19))
{
edge_fusion_temp[k,7]=5
}else
{
edge_fusion_temp[k,7]=6
}
}
}
}
}
}
#
edge_fusion_temp = read.xlsx(file = "edge_fusion_temp.xlsx",sheetIndex = 1)
edge_fusion_temp = apply(edge_fusion_temp, 2, as.character)
cluster_group = as.matrix(read.table(file = "cluster_group.txt",header=F,sep="\t",row.names = NULL,check.names = F))
temp1 = matrix(data = NA, nrow = nrow(edge_fusion_temp), ncol = 3)
edge_fusion_temp = cbind(edge_fusion_temp, temp1)
rm(temp1)
#
for (i in 1:nrow(edge_fusion_temp))
{
for (j in 1:223)
{
if(edge_fusion_temp[i,1]==cluster_group[j,1])
{
edge_fusion_temp[i,8]=cluster_group[j,2]
}
}
}
#
for (m in 1:nrow(edge_fusion_temp))
{
for (n in 1:223)
{
if(edge_fusion_temp[m,2]==cluster_group[n,1])
{
edge_fusion_temp[m,9]=cluster_group[n,2]
}
}
}
rm(i,j,m,n)
#
edge_fusion_incluster = edge_fusion_temp[which(edge_fusion_temp[,8]==edge_fusion_temp[,9]),]
edge_fusion_outcluster = edge_fusion_temp[which(edge_fusion_temp[,8]!=edge_fusion_temp[,9]),]
edge_fusion_incluster[,c(8,9)] = as.numeric(edge_fusion_incluster[,c(8,9)])
edge_fusion_outcluster[,c(8,9)] = as.numeric(edge_fusion_outcluster[,c(8,9)])
#statistics
edge_fusion_incluster_order = edge_fusion_incluster[order(edge_fusion_incluster[,8]),]
edge_fusion_incluster_order1 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==1),]
edge_fusion_incluster_order2 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==2),]
edge_fusion_incluster_order3 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==3),]
edge_fusion_incluster_order4 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==4),]
edge_fusion_incluster_order5 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==5),]
edge_fusion_incluster_order6 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==6),]
edge_fusion_incluster_order7 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==7),]
edge_fusion_incluster_order8 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==8),]
edge_fusion_incluster_order9 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==9),]
edge_fusion_incluster_order10 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==10),]
edge_fusion_incluster_order11 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==11),]
edge_fusion_incluster_order12 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==12),]
edge_fusion_incluster_order13 = as.matrix(edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==13),])
edge_fusion_incluster_order13 = t(edge_fusion_incluster_order13)
edge_fusion_incluster_order14 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==14),]
edge_fusion_incluster_order15 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==15),]
edge_fusion_incluster_order16 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==16),]
edge_fusion_incluster_order17 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==17),]
edge_fusion_incluster_order18 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==18),]
edge_fusion_incluster_order19 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==19),]
edge_fusion_incluster_order20 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==20),]
edge_fusion_incluster_order21 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==21),]
edge_fusion_incluster_order22 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==22),]
edge_fusion_incluster_order23 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==23),]
edge_fusion_incluster_order24 = edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==24),]
#
edge_fusion_incluster_order[,c(8,9)] = as.numeric(edge_fusion_incluster_order[,c(8,9)])
cluster_hierarchy = matrix(data = NA, nrow = 24, ncol = 6)
rownames(cluster_hierarchy) = paste("cluster", 1:24, sep = "")
colnames(cluster_hierarchy) = paste("hierarchy", 1:6, sep = "")
for (i in 1:24)
{
for (j in 1:6)
{
cluster_hierarchy[i,j]=length(which(edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==i),7]=="1"))
cluster_hierarchy[i,2]=length(which(edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==i),7]=="2"))
cluster_hierarchy[i,3]=length(which(edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==i),7]=="3"))
cluster_hierarchy[i,4]=length(which(edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==i),7]=="4"))
cluster_hierarchy[i,5]=length(which(edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==i),7]=="5"))
cluster_hierarchy[i,6]=length(which(edge_fusion_incluster_order[which(edge_fusion_incluster_order[,8]==i),7]=="6"))
}
}
rm(i,j)
#
temp2 = matrix(data = NA, nrow = 24, ncol = 1)
cluster_hierarchy_percent = cbind(cluster_hierarchy, temp2)
rm(temp2)
cluster_hierarchy_percent[,7] = rowSums(cluster_hierarchy)
for (i in 1:24)
{
for (j in 1:6)
{
cluster_hierarchy_percent[i,j]=round(cluster_hierarchy_percent[i,j]/cluster_hierarchy_percent[i,7]*100,2)
}
}
cluster_hierarchy_percent = cluster_hierarchy_percent[,-7]
library(pheatmap)
pheatmap(t(cluster_hierarchy_percent),cluster_cols=F,color = colorRampPalette(c("white", "firebrick3"))(50),cluster_rows=F,border_color="grey60",fontsize=10,show_rownames = T,show_colnames = T)

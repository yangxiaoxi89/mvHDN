write.table(disease_variant_Mala, file = "E:/工作集合/肝脏疾病知识图谱/Data/ID Mapping Data/5Disease/Disease/MalaCards/disease_variant_Mala.txt",sep = "\t",quote = F,row.names = F,col.names = T)
write.table(disease_variant_Mala_temp11, file = "E:/工作集合/肝脏疾病知识图谱/Data/ID Mapping Data/5Disease/Disease/MalaCards/na_disease_variant_Mala.txt",sep = "\t",quote = F,row.names = F,col.names = T)
# 读入所有需要的mapping文件（一直要用的比对文件）
OMIM_uniqu_temp = as.data.frame(read.table(file = "E:/工作集合/肝脏疾病知识图谱/Data/ID Mapping Data/5Disease/Disease/disease mapping/CLEAN/OMIM_mapping_uniqu.txt",header = T, sep = "\t",row.names = NULL,check.names = F,quote = "",stringsAsFactors = F))
OMIM_dupli_temp = as.data.frame(read.table(file = "E:/工作集合/肝脏疾病知识图谱/Data/ID Mapping Data/5Disease/Disease/disease mapping/CLEAN/OMIM_mapping_dupli.txt",header = T, sep = "\t",row.names = NULL,check.names = F,quote = "",stringsAsFactors = F))
ORPHA_uniqu_temp = as.data.frame(read.table(file = "E:/工作集合/肝脏疾病知识图谱/Data/ID Mapping Data/5Disease/Disease/disease mapping/CLEAN/ORPHA_mapping_uniqu.txt",header = T, sep = "\t",row.names = NULL,check.names = F,quote = "",stringsAsFactors = F))
ORPHA_dupli_temp = as.data.frame(read.table(file = "E:/工作集合/肝脏疾病知识图谱/Data/ID Mapping Data/5Disease/Disease/disease mapping/CLEAN/ORPHA_mapping_dupli.txt",header = T, sep = "\t",row.names = NULL,check.names = F,quote = "",stringsAsFactors = F))
DO_uniqu_temp = as.data.frame(read.table(file = "E:/工作集合/肝脏疾病知识图谱/Data/ID Mapping Data/5Disease/Disease/disease mapping/CLEAN/DO_mapping_uniqu.txt",header = T, sep = "\t",row.names = NULL,check.names = F,quote = "",stringsAsFactors = F))
DO_dupli_temp = as.data.frame(read.table(file = "E:/工作集合/肝脏疾病知识图谱/Data/ID Mapping Data/5Disease/Disease/disease mapping/CLEAN/DO_mapping_dupli.txt",header = T, sep = "\t",row.names = NULL,check.names = F,quote = "",stringsAsFactors = F))
#################################################################################################
#### 4.3.1.5 疾病-GO/KEGG（MalaCards），共四个文件 ####
#### GO ####
disease_GOBP_Mala_temp = as.data.frame(read.table(file = "E:/工作集合/肝脏疾病知识图谱/Data/ID Mapping Data/4KEGG and GO/MalaCardsGoTermsBP.txt",header = T, sep = "\t",row.names = NULL,check.names = F,quote = "",stringsAsFactors = F))
disease_GOCC_Mala_temp = as.data.frame(read.table(file = "E:/工作集合/肝脏疾病知识图谱/Data/ID Mapping Data/4KEGG and GO/MalaCardsGoTermsCC.txt",header = T, sep = "\t",row.names = NULL,check.names = F,quote = "",stringsAsFactors = F))
disease_GOMF_Mala_temp = as.data.frame(read.table(file = "E:/工作集合/肝脏疾病知识图谱/Data/ID Mapping Data/4KEGG and GO/MalaCardsGoTermsMF.txt",header = T, sep = "\t",row.names = NULL,check.names = F,quote = "",stringsAsFactors = F))
disease_GO_temp = list(disease_GOBP_Mala_temp,disease_GOCC_Mala_temp,disease_GOMF_Mala_temp)
# 给矩阵加一列，用于存储疾病的ID
for (i in 1:3)
{
disease_GO_temp[[i]] = cbind(disease_GO_temp[[i]],c("NA"))
colnames(disease_GO_temp[[i]])[6] = "DiseaseCode"
}
View(disease_GO_temp)
View(disease_GO_temp[[1]])
View(OMIM_uniqu_temp)
View(disease_GO_temp[[2]])
## 与OMIM_uniqu_temp对齐
for (i in 1:3)
{
for (j in 1:nrow(disease_GO_temp[[i]]))
{
if(disease_GO_temp[[i]][j,2] %in% OMIM_uniqu_temp[,1])
{
disease_GO_temp[[i]][j,6] = OMIM_uniqu_temp[which(OMIM_uniqu_temp[,1]==disease_GO_temp[[i]][j,2]),4]
}
print(j)
}
print(i)
}
View(disease_GO_temp)
View(disease_GO_temp[[1]])
View(disease_GO_temp[[3]])
## 与OMIM_dupli_temp对齐
# 单独提出没与OMIM_uniqu_temp匹配上疾病
disease_GO_temp1 = NULL
disease_GO_temp2 = NULL
for (i in 1:3)
{
disease_GO_temp1[[i]] = disease_GO_temp[[i]][which(disease_GO_temp[[i]][,6] == "NA"),]    # 没有OMIM值的
disease_GO_temp2[[i]] = disease_GO_temp[[i]][which(disease_GO_temp[[i]][,6] != "NA"),]    # 有OMIM值的
}
View(disease_GO_temp1)
View(disease_GO_temp1[[1]])
View(disease_GO_temp2)
View(disease_GO_temp2[[1]])
#
for (i in 1:3)
{
for (j in 1:nrow(disease_GO_temp1[[i]]))
{
if(disease_GO_temp1[[i]][j,1] %in% OMIM_dupli_temp[,3])
{
disease_GO_temp1[[i]][j,6] = OMIM_dupli_temp[which(OMIM_dupli_temp[,3]==disease_GO_temp1[[i]][j,1]),4]
}
print(j)
}
print(i)
}
## 与ORPHA_uniqu_temp对齐
# 单独提出没与OMIM_dupli_temp匹配上疾病
disease_GO_temp3 = NULL
disease_GO_temp4 = NULL
for (i in 1:3)
{
disease_GO_temp3[[i]] = disease_GO_temp1[[i]][which(disease_GO_temp1[[i]][,6] == "NA"),]    # 没有编码的
disease_GO_temp4[[i]] = disease_GO_temp1[[i]][which(disease_GO_temp1[[i]][,6] != "NA"),]    # 有编码的
}
View(disease_GO_temp4)
View(disease_GO_temp4[[2]])
View(disease_GO_temp3)
View(disease_GO_temp3[[1]])
#
for (i in 1:3)
{
for (j in 1:nrow(disease_GO_temp3[[i]]))
{
if(disease_GO_temp3[[i]][j,2] %in% ORPHA_uniqu_temp[,1])
{
disease_GO_temp3[[i]][j,6] = ORPHA_uniqu_temp[which(ORPHA_uniqu_temp[,1]==disease_GO_temp3[[i]][j,2]),4]
}
print(j)
}
print(i)
}
## 与ORPHA_dupli_temp对齐
# 单独提出没与ORPHA_uniqu_temp匹配上疾病
disease_GO_temp5 = NULL
disease_GO_temp6 = NULL
for (i in 1:3)
{
disease_GO_temp5[[i]] = disease_GO_temp3[[i]][which(disease_GO_temp3[[i]][,6] == "NA"),]    # 没有编码的
disease_GO_temp6[[i]] = disease_GO_temp3[[i]][which(disease_GO_temp3[[i]][,6] != "NA"),]    # 有编码的
}
View(disease_GO_temp5)
View(disease_GO_temp5[[2]])
View(disease_GO_temp6)
View(disease_GO_temp6[[2]])
#
for (i in 1:3)
{
for (j in 1:nrow(disease_GO_temp5[[i]]))
{
if(disease_GO_temp5[[i]][j,1] %in% ORPHA_dupli_temp[,3])
{
disease_GO_temp5[[i]][j,6] = ORPHA_dupli_temp[which(ORPHA_dupli_temp[,3]==disease_GO_temp5[[i]][j,1]),4]
}
print(j)
}
print(i)
}
## 与DO_uniqu_temp对齐
# 单独提出没与ORPHA_dupli_temp匹配上疾病
disease_GO_temp7 = NULL
disease_GO_temp8 = NULL
for (i in 1:3)
{
disease_GO_temp7[[i]] = disease_GO_temp5[[i]][which(disease_GO_temp5[[i]][,6] == "NA"),]    # 没有编码的
disease_GO_temp8[[i]] = disease_GO_temp5[[i]][which(disease_GO_temp5[[i]][,6] != "NA"),]    # 有编码的
}
View(disease_GO_temp7)
View(disease_GO_temp7[[2]])
View(disease_GO_temp8)
View(disease_GO_temp8[[2]])
#
for (i in 1:3)
{
for (j in 1:nrow(disease_GO_temp7[[i]]))
{
if(disease_GO_temp7[[i]][j,2] %in% DO_uniqu_temp[,1])
{
disease_GO_temp7[[i]][j,6] = DO_uniqu_temp[which(DO_uniqu_temp[,1]==disease_GO_temp7[[i]][j,2]),4]
}
print(j)
}
print(i)
}
## 与DO_dupli_temp对齐
# 单独提出没与DO_uniqu_temp匹配上疾病
disease_GO_temp9 = NULL
disease_GO_temp10 = NULL
for (i in 1:3)
{
disease_GO_temp9[[i]] = disease_GO_temp7[[i]][which(disease_GO_temp7[[i]][,6] == "NA"),]    # 没有编码的
disease_GO_temp10[[i]] = disease_GO_temp7[[i]][which(disease_GO_temp7[[i]][,6] != "NA"),]    # 有编码的
}
View(disease_GO_temp9)
View(disease_GO_temp9[[3]])
View(disease_GO_temp10)
View(disease_GO_temp10[[3]])
#
for (i in 1:3)
{
for (j in 1:nrow(disease_GO_temp9[[i]]))
{
if(disease_GO_temp9[[i]][j,1] %in% DO_dupli_temp[,3])
{
disease_GO_temp9[[i]][j,6] = DO_dupli_temp[which(DO_dupli_temp[,3]==disease_GO_temp9[[i]][j,1]),4]
}
print(j)
}
print(i)
}
## 再对不上的是真的对不上了！
disease_GO_temp11 = NULL
disease_GO_temp12 = NULL
for (i in 1:3)
{
disease_GO_temp11[[i]] = disease_GO_temp9[[i]][which(disease_GO_temp9[[i]][,6] == "NA"),]    # 没有编码的
disease_GO_temp12[[i]] = disease_GO_temp9[[i]][which(disease_GO_temp9[[i]][,6] != "NA"),]    # 有编码的
}
View(disease_GO_temp11)
View(disease_GO_temp11[[2]])
View(disease_GO_temp12)
View(disease_GO_temp12[[3]])
View(disease_GO_temp2)
View(disease_GO_temp2[[1]])
View(disease_GOBP_Mala_temp)
View(disease_GOCC_Mala_temp)
View(DO_dupli_temp)
View(disease_GOMF_Mala_temp)
View(disease_GOBP_Mala_temp)
na_disease_GO = rbind(disease_GO_temp11[[1]],disease_GO_temp11[[2]],disease_GO_temp11[[3]])
disease_GO_temp11[[1]]
View(disease_GOBP_Mala_temp)
View(disease_GOBP_Mala_temp)
View(disease_GOCC_Mala_temp)
color = c("#6C6B74","#80ADD7","#C05640","#1D65A6","#A882C1","#0ABDA0","#D6618F","#F3D4A0","#D4DCA9","#5C868D","#9199BE","#D9AC2A","#F46A4E","#BF9D7A","#00743F","#192E5B","#74593D")
a_temp = as.data.frame(read.table(file = "E:/工作集合/肝脏疾病知识图谱/Data/Merged Filtered&Overlap Data_yxx/all_data/all_data_to company.txt",header = T, sep = "\t",row.names = NULL,check.names = F,quote = "",stringsAsFactors = F))
table(a_temp$relation)
library(SNFtool)
#################################################################################################
#### 4.3.5.3 疾病-疾病 ####
disease_disease_pharm_temp = as.data.frame(read.table(file = "E:/工作集合/肝脏疾病知识图谱/Data/Classified Data/PharmKG/disease_disease relation.txt",header = T, sep = "\t",row.names = NULL,check.names = F,quote = "",stringsAsFactors = F))
###### 5.drug瀹炰綋鍚嶇О缁熶竴 ######
##
# github涓妛ebchem鍖呯殑璺緞锛歝hropensci/webchem
library(webchem)
library(stringr)
#### 5.1.1 miRNA-drug处理 ####
#
miRNA_drug_RNAI_temp = as.data.frame(read.table(file = "E:/工作集合/肝脏疾病知识图谱/Data/ID Mapping Data/1miRNA/RNAInter/miRNA_drug/miRNA_drug_RNAI.txt",header = T, sep = "\t",row.names = NULL,check.names = F,quote = "",stringsAsFactors = F))
View(miRNA_drug_RNAI_temp)
no_miRNA_drug_RNAI_temp = as.data.frame(read.table(file = "E:/工作集合/肝脏疾病知识图谱/Data/ID Mapping Data/1miRNA/RNAInter/miRNA_drug/no_miRNA_drug_RNAI.txt",header = T, sep = "\t",row.names = NULL,check.names = F,quote = "",stringsAsFactors = F))
no_miRNA_drug_RNAI_temp = as.data.frame(read.table(file = "E:/工作集合/肝脏疾病知识图谱/Data/ID Mapping Data/1miRNA/RNAInter/miRNA_drug/nostand_miRNA_drug_RNAI.txt",header = T, sep = "\t",row.names = NULL,check.names = F,quote = "",stringsAsFactors = F))
View(no_miRNA_drug_RNAI_temp)
# 删去第一行的值
miRNA_drug_RNAI_temp = miRNA_drug_RNAI_temp[-1,]
## 对miRNA_drug_RNAI_temp处理
# 该文件分为三种情况，NA\CID\DRUGBANK，分为CID的和非CID处理
miRNA_drug_RNAI_cid = miRNA_drug_RNAI_temp[which(str_sub(miRNA_drug_RNAI_temp[,7],1,4)=="CID:"),]
miRNA_drug_RNAI_nocid = miRNA_drug_RNAI_temp[which(str_sub(miRNA_drug_RNAI_temp[,7],1,4)!="CID:"),]
#################################################################################################
#### 5.1.1 miRNA-drug处理 ####
# 读入数据
miRNA_drug_RNAI_temp = as.data.frame(read.table(file = "E:/工作集合/肝脏疾病知识图谱/Data/ID Mapping Data/1miRNA/RNAInter/miRNA_drug/miRNA_drug_RNAI.txt",header = T, sep = "\t",row.names = NULL,check.names = F,quote = "",stringsAsFactors = F))
# 删去第一行的值，MIR761不是miRNA
miRNA_drug_RNAI_temp = miRNA_drug_RNAI_temp[-1,]
## 对miRNA_drug_RNAI_temp处理
# 该文件分为三种情况，NA\CID\DRUGBANK，分为CID的和非CID处理
miRNA_drug_RNAI_cid = miRNA_drug_RNAI_temp[which(str_sub(miRNA_drug_RNAI_temp[,7],1,4)=="CID:"),]
miRNA_drug_RNAI_nocid = miRNA_drug_RNAI_temp[which(str_sub(miRNA_drug_RNAI_temp[,7],1,4)!="CID:"),]
5850+716
View(miRNA_drug_RNAI_cid)
View(miRNA_drug_RNAI_nocid)
## 对miRNA_drug_RNAI_cid处理
for (i in 1:nrow(miRNA_drug_RNAI_cid))
{
if((str_sub(miRNA_drug_RNAI_cid[i,7],1,4))=="CID:")
{
miRNA_drug_RNAI_cid[i,7] = gsub("CID:","",miRNA_drug_RNAI_cid[i,7])
}else
{
miRNA_drug_RNAI_cid[i,7] = miRNA_drug_RNAI_cid[i,7]
}
print(i)
}
View(miRNA_drug_RNAI_cid)
miRNA_drug_RNAI_temp = as.data.frame(read.table(file = "E:/工作集合/肝脏疾病知识图谱/Data/ID Mapping Data/1miRNA/RNAInter/miRNA_drug/miRNA_drug_RNAI.txt",header = T, sep = "\t",row.names = NULL,check.names = F,quote = "",stringsAsFactors = F))
# no_miRNA_drug_RNAI_temp = as.data.frame(read.table(file = "E:/工作集合/肝脏疾病知识图谱/Data/ID Mapping Data/1miRNA/RNAInter/miRNA_drug/nostand_miRNA_drug_RNAI.txt",header = T, sep = "\t",row.names = NULL,check.names = F,quote = "",stringsAsFactors = F))
# 删去第一行的值，MIR761不是miRNA
miRNA_drug_RNAI_temp = miRNA_drug_RNAI_temp[-1,]
## 对miRNA_drug_RNAI_temp处理
# 该文件分为2种情况，NA\CID\DRUGBANK，分为CID的和非CID处理
miRNA_drug_RNAI_cid = miRNA_drug_RNAI_temp[which(str_sub(miRNA_drug_RNAI_temp[,7],1,4)=="CID:"),]   # CID编号的药物
miRNA_drug_RNAI_nocid = miRNA_drug_RNAI_temp[which(str_sub(miRNA_drug_RNAI_temp[,7],1,4)!="CID:"),]   # 药物没给CID编号，需要自己去转化
## 对miRNA_drug_RNAI_cid处理
for (i in 1:nrow(miRNA_drug_RNAI_cid))
{
if((str_sub(miRNA_drug_RNAI_cid[i,7],1,4))=="CID:")
{
miRNA_drug_RNAI_cid[i,7] = gsub("CID:","CID",miRNA_drug_RNAI_cid[i,7])
}else
{
miRNA_drug_RNAI_cid[i,7] = miRNA_drug_RNAI_cid[i,7]
}
print(i)
}
View(miRNA_drug_RNAI_cid)
## 对miRNA_drug_RNAI_nocid处理
drug_name = unique(miRNA_drug_RNAI_nocid[,4])
drug_cid = get_cid(drug_name)
View(drug_cid)
# 重复的取第一个？？？？？？？？？？？？有待优化
drug_cid = as.data.frame(drug_cid,stringsAsFactors = FALSE)
View(drug_cid)
drug_cid[,2] = as.numeric(drug_cid$cid)
# 重复的提取出来
dupli_name = drug_cid[duplicated(drug_cid[,1]),1]   # 这几个是MCID重复的(把它们挑出来，手动检查并填写)
dupli_mapping = drug_cid[which(drug_cid[,1] %in% dupli_name),]   # 把重复的几个挑出来，对照ORPHA的mapping文件重新填写
View(dupli_mapping)
drug_cid1 = drug_cid[-c(which(drug_cid[,1] %in% dupli_name)),]
View(drug_cid1)
View(drug_cid)
# 手动核对删除
dupli_mapping = dupli_mapping[-c(2),]
# 将删除后的和原本不重复的合并
drug_mapping = rbind(drug_cid1,dupli_mapping)   # MalaCards中有omim编号的疾病文件
View(drug_mapping)
drug_mapping = drug_mapping[!duplicated(drug_mapping[,1]),]
##
for(i in 1:nrow(miRNA_drug_RNAI_nocid))
{
miRNA_drug_RNAI_nocid[i,7] = drug_mapping[which(drug_mapping[,1]==miRNA_drug_RNAI_nocid[i,4]),2]
print(i)
}
View(miRNA_drug_RNAI_nocid)
# 有CID和无CID的药物合并和区分
miRNA_drug_RNAI_nocid1 = miRNA_drug_RNAI_nocid[is.na(miRNA_drug_RNAI_nocid[,7]),]
View(miRNA_drug_RNAI_nocid1)
miRNA_drug_RNAI_cid1 = miRNA_drug_RNAI_nocid[!is.na(miRNA_drug_RNAI_nocid[,7]),]
View(miRNA_drug_RNAI_cid1)
# 给找到CID编号的药物编码添加前缀
for (i in 1:nrow(miRNA_drug_RNAI_cid1))
{
miRNA_drug_RNAI_cid1[i,7] =  paste("CID",miRNA_drug_RNAI_cid1[i,7],sep = "")
print(i)
}
View(miRNA_drug_RNAI_nocid1)
View(miRNA_drug_RNAI_nocid)
View(miRNA_drug_RNAI_cid1)
View(miRNA_drug_RNAI_cid)
View(miRNA_drug_RNAI_cid1)
# 拼接有CID的药物
miRNA_drug_RNAI_temp1 = rbind(miRNA_drug_RNAI_cid,miRNA_drug_RNAI_cid1)
5868+698
#
write.table(miRNA_drug_RNAI_temp1, file = "E:/工作集合/肝脏疾病知识图谱/Data/ID Mapping Data/6Drug/RNAInter/miRNA_drug_RNAI.txt",sep = "\t",quote = F,row.names = F,col.names = T)
write.table(miRNA_drug_RNAI_nocid1, file = "E:/工作集合/肝脏疾病知识图谱/Data/ID Mapping Data/6Drug/RNAInter/na_miRNA_drug_RNAI.txt",sep = "\t",quote = F,row.names = F,col.names = T)
#################################################################################################
#### 5.1.2 drug-gene处理 ####
#
gene_drug_RNAI_temp = as.data.frame(read.table(file = "E:/工作集合/肝脏疾病知识图谱/Data/ID Mapping Data/2Gene/RNAInter/gene_drug/gene_drug_RNAI.txt",header = T, sep = "\t",row.names = NULL,check.names = F,quote = "",stringsAsFactors = F))
View(gene_drug_RNAI_temp)
# 该文件分为2种情况，CID\DRUGBANK，分为CID的和非CID处理
gene_drug_RNAI_cid = gene_drug_RNAI_temp[which(str_sub(gene_drug_RNAI_temp[,7],1,4)=="CID:"),]
gene_drug_RNAI_nocid = gene_drug_RNAI_temp[which(str_sub(gene_drug_RNAI_temp[,7],1,4)!="CID:"),]
View(gene_drug_RNAI_nocid)
## 对gene_drug_RNAI_cid处理
for (i in 1:nrow(gene_drug_RNAI_cid))
{
if((str_sub(gene_drug_RNAI_cid[i,7],1,4))=="CID:")
{
gene_drug_RNAI_cid[i,7] = gsub("CID:","CID",gene_drug_RNAI_cid[i,7])
}else
{
gene_drug_RNAI_cid[i,7] = gene_drug_RNAI_cid[i,7]
}
print(i)
}
View(gene_drug_RNAI_cid)
## 对gene_drug_RNAI_nocid处理(只有一个)
drug_name = unique(gene_drug_RNAI_nocid[,4])
drug_cid = get_cid(drug_name)
View(drug_cid)
gene_drug_RNAI_nocid[1,7] = "NA"
View(gene_drug_RNAI_nocid)
#
write.table(gene_drug_RNAI_cid, file = "E:/工作集合/肝脏疾病知识图谱/Data/ID Mapping Data/6Drug/RNAInter/gene_drug_RNAI.txt",sep = "\t",quote = F,row.names = F,col.names = T)
#
write.table(gene_drug_RNAI_cid, file = "E:/工作集合/肝脏疾病知识图谱/Data/ID Mapping Data/6Drug/RNAInter/gene_drug_RNAI.txt",sep = "\t",quote = F,row.names = F,col.names = T)
write.table(gene_drug_RNAI_nocid, file = "E:/工作集合/肝脏疾病知识图谱/Data/ID Mapping Data/6Drug/RNAInter/na_gene_drug_RNAI.txt",sep = "\t",quote = F,row.names = F,col.names = T)
View(gene_drug_RNAI_cid)
#################################################################################################
#### 5.3 MalaCards ####
#
drug_disease_Mala_temp = as.data.frame(read.table(file = "E:/工作集合/肝脏疾病知识图谱/Data/ID Mapping Data/5Disease/Disease/MalaCards/disease_drug_Mala.txt",header = T, sep = "\t",row.names = NULL,check.names = F,quote = "",stringsAsFactors = F))
drug_disease_na_Mala_temp = as.data.frame(read.table(file = "E:/工作集合/肝脏疾病知识图谱/Data/ID Mapping Data/5Disease/Disease/MalaCards/diseasena_drug_na_Mala.txt",header = T, sep = "\t",row.names = NULL,check.names = F,quote = "",stringsAsFactors = F))
drug_disease_na_Mala_temp = as.data.frame(read.table(file = "E:/工作集合/肝脏疾病知识图谱/Data/ID Mapping Data/5Disease/Disease/MalaCards/na_disease_drug_Mala.txt",header = T, sep = "\t",row.names = NULL,check.names = F,quote = "",stringsAsFactors = F))
View(drug_disease_Mala_temp)
### 对drug_disease_Mala_temp处理
drug_name = unique(drug_disease_Mala_temp[,3])
load("E:/工作集合/肝脏疾病知识图谱/Script/Mala_drug.RData")
View(drug_disease_Mala_temp)
#################################################################################################
#### 5.3 MalaCards ####
#
drug_disease_Mala_temp = as.data.frame(read.table(file = "E:/工作集合/肝脏疾病知识图谱/Data/ID Mapping Data/5Disease/Disease/MalaCards/disease_drug_Mala.txt",header = T, sep = "\t",row.names = NULL,check.names = F,quote = "",stringsAsFactors = F))
drug_disease_na_Mala_temp = as.data.frame(read.table(file = "E:/工作集合/肝脏疾病知识图谱/Data/ID Mapping Data/5Disease/Disease/MalaCards/na_disease_drug_Mala.txt",header = T, sep = "\t",row.names = NULL,check.names = F,quote = "",stringsAsFactors = F))
### 对drug_disease_Mala_temp处理
drug_name = unique(drug_disease_Mala_temp[,3])
load("E:/工作集合/肝脏疾病知识图谱/Script/Mala_drug.RData")
#################################################################################################
#### 5.3 MalaCards ####
#
drug_disease_Mala_temp = as.data.frame(read.table(file = "E:/工作集合/肝脏疾病知识图谱/Data/ID Mapping Data/5Disease/Disease/MalaCards/disease_drug_Mala.txt",header = T, sep = "\t",row.names = NULL,check.names = F,quote = "",stringsAsFactors = F))
drug_disease_na_Mala_temp = as.data.frame(read.table(file = "E:/工作集合/肝脏疾病知识图谱/Data/ID Mapping Data/5Disease/Disease/MalaCards/na_disease_drug_Mala.txt",header = T, sep = "\t",row.names = NULL,check.names = F,quote = "",stringsAsFactors = F))
### 对drug_disease_Mala_temp处理
drug_name = unique(drug_disease_Mala_temp[,3])
drug_cid = get_cid(drug_name)   # 时间久，保存Rdata
#################################################################################################
#### 5.3 MalaCards ####
#
drug_disease_Mala_temp = as.data.frame(read.table(file = "E:/工作集合/肝脏疾病知识图谱/Data/ID Mapping Data/5Disease/Disease/MalaCards/disease_drug_Mala.txt",header = T, sep = "\t",row.names = NULL,check.names = F,quote = "",stringsAsFactors = F))
drug_disease_na_Mala_temp = as.data.frame(read.table(file = "E:/工作集合/肝脏疾病知识图谱/Data/ID Mapping Data/5Disease/Disease/MalaCards/na_disease_drug_Mala.txt",header = T, sep = "\t",row.names = NULL,check.names = F,quote = "",stringsAsFactors = F))
View(drug_disease_Mala_temp)
### 5.3.1 对drug_disease_Mala_temp处理
drug_name = unique(drug_disease_Mala_temp[,3])
drug_cid = get_cid(drug_name)   # 时间久，保存Rdata!
###### 5.drug实体名称统一 ######
##
# github上webchem包的路径：chropensci/webchem
library(webchem)
drug_cid = get_cid(drug_name)   # 时间久，保存Rdata!
View(drug_cid)
save.image("E:/工作集合/肝脏疾病知识图谱/Script/2.5drug_Mala.RData")
load("E:/工作集合/肝脏疾病知识图谱/Script/Mala_drug.RData")
View(drug_cid)
View(drug_cid1)
View(drug_cid)
load("E:/工作集合/肝脏疾病知识图谱/Script/2.5drug_Mala.RData")
View(drug_cid)
load("E:/工作集合/肝脏疾病知识图谱/Script/2.5drug_Mala.RData")
View(drug_cid)
### 5.3.2 对drug_disease_na_Mala_temp处理
drug_name1 = unique(drug_disease_na_Mala_temp[,3])
drug_cid1 = get_cid(drug_name1)   # 时间久，保存Rdata
save.image("E:/工作集合/肝脏疾病知识图谱/Script/2.5drug_Mala_na.RData")
View(drug_cid1)
load("E:/工作集合/肝脏疾病知识图谱/Script/2.5drug_Mala.RData")
# 重复的提取出来
dupli_name = drug_cid[duplicated(drug_cid[,1]),1]   # 这几个是药物名称重复的(把它们挑出来，手动检查并填写)
dupli_mapping = drug_cid[which(drug_cid[,1] %in% dupli_name),]   # 把重复的几个挑出来，对照数据库手动重新填写
setwd("D:/工作集合/疾病关联网络两篇英文/v3.0")
setwd("E:/工作集合/疾病关联网络两篇英文/v3.0")
load("disease_matrixs_to_Hesong—v3.rdata")
library(SNFtool)
library(clValid) #聚类结果验证
library(pheatmap)
library(plotrix) #各种绘图功能
library(xlsx)
neighbor_num=7#number of neighbors, usually (10~30),20 default.邻居数
alpha=0.5#hyperparameter, usually (0.3~0.8),0.5 default.超参数
iteration_num=20#Number of Iterations, usually (10~20), 20 default.迭代次数
rownames(GOsim_sci2015)=rownames(sim_natcom2014)
colnames(GOsim_sci2015)=colnames(sim_natcom2014)
rownames(dist_sci2015)=rownames(sim_natcom2014)
colnames(dist_sci2015)=colnames(sim_natcom2014)
####计算亲和矩阵####
affini_list=NULL
affini_list=c(affini_list,list(affinityMatrix(dist_sci2015,neighbor_num, alpha))) #从一般距离矩阵计算亲和矩阵 affinityMatrix(diff, K = 20, sigma = 0.5)
affini_list=c(affini_list,list(affinityMatrix(1-GOsim_sci2015,neighbor_num, alpha)))
affini_list=c(affini_list,list(affinityMatrix(1-sim_natcom2014,neighbor_num, alpha)))
####各层次数据融合以及各层次数据亲和矩阵之间的相关性####
fusion_result = SNF(affini_list, neighbor_num, iteration_num)#similarity matrix of data_result(after the SNF calculation) for heatmap
rownames(fusion_result)=rownames(dist_sci2015)
colnames(fusion_result)=rownames(dist_sci2015)
####根据两个聚类有效性指标（连通度和邓恩指数）选择聚类数，并进行谱聚类####
connectivity_num=NULL
dunn_num=NULL
for (i in 2:40)
{
cluster_group=spectralClustering(fusion_result,i)
connectivity_num=c(connectivity_num,connectivity(distance = 1-fusion_result,clusters = cluster_group))
dunn_num=c(dunn_num,dunn(distance = 1-fusion_result,clusters = cluster_group))
}
twoord.plot(lx=c(2:40),ly=connectivity_num,rx=c(2:40),ry=dunn_num
,xlim = c(1,40),lylim = c(40,220),rylim = c(0.74,0.94),lcol = "red",rcol = "blue"
,xlab = "Cluster Number",ylab = "Connectivity Index",rylab = "Dunn Index"
,main = "Cluster Validity",type = c("line","line"),lwd=2)
dunn_num
for (i in 4:34)
{
cluster_group =spectralClustering(fusion_result,i)
connectivity_num=c(connectivity_num,connectivity(distance = 1-fusion_result,clusters = cluster_group))
dunn_num=c(dunn_num,dunn(distance = 1-fusion_result,clusters = cluster_group))
}
twoord.plot(lx=c(3:33),ly=connectivity_num,rx=c(3:33),ry=dunn_num
,xlim = c(3,33),lylim = c(40,220),rylim = c(0.74,0.94),lcol = "red",rcol = "blue"
,xlab = "Cluster Number",ylab = "Connectivity Index",rylab = "Dunn Index"
,main = "Cluster Validity",type = c("b","b"),lwd=2)
for (i in 2:40)
{
cluster_group=spectralClustering(fusion_result,i)
connectivity_num=c(connectivity_num,connectivity(distance = 1-fusion_result,clusters = cluster_group))
dunn_num=c(dunn_num,dunn(distance = 1-fusion_result,clusters = cluster_group))
}
twoord.plot(lx=c(2:40),ly=connectivity_num,rx=c(2:40),ry=dunn_num
,xlim = c(1,40),lylim = c(40,220),rylim = c(0.74,0.94),lcol = "red",rcol = "blue"
,xlab = "Cluster Number",ylab = "Connectivity Index",rylab = "Dunn Index"
,main = "Cluster Validity",type = c("b","b"),lwd=2)
load("disease_matrixs_to_Hesong—v3.rdata")
library(SNFtool)
library(clValid) #聚类结果验证
library(pheatmap)
library(plotrix) #各种绘图功能
library(xlsx)
neighbor_num=7#number of neighbors, usually (10~30),20 default.邻居数
alpha=0.5#hyperparameter, usually (0.3~0.8),0.5 default.超参数
iteration_num=20#Number of Iterations, usually (10~20), 20 default.迭代次数
rownames(GOsim_sci2015)=rownames(sim_natcom2014)
colnames(GOsim_sci2015)=colnames(sim_natcom2014)
rownames(dist_sci2015)=rownames(sim_natcom2014)
colnames(dist_sci2015)=colnames(sim_natcom2014)
####计算亲和矩阵####
affini_list=NULL
affini_list=c(affini_list,list(affinityMatrix(dist_sci2015,neighbor_num, alpha))) #从一般距离矩阵计算亲和矩阵 affinityMatrix(diff, K = 20, sigma = 0.5)
affini_list=c(affini_list,list(affinityMatrix(1-GOsim_sci2015,neighbor_num, alpha)))
affini_list=c(affini_list,list(affinityMatrix(1-sim_natcom2014,neighbor_num, alpha)))
####根据两个聚类有效性指标（连通度和邓恩指数）选择聚类数，并进行谱聚类####
connectivity_num=NULL
dunn_num=NULL
for (i in 4:34)
{
cluster_group =spectralClustering(fusion_result,i)
connectivity_num=c(connectivity_num,connectivity(distance = 1-fusion_result,clusters = cluster_group))
dunn_num=c(dunn_num,dunn(distance = 1-fusion_result,clusters = cluster_group))
}
####各层次数据融合以及各层次数据亲和矩阵之间的相关性####
fusion_result = SNF(affini_list, neighbor_num, iteration_num)#similarity matrix of data_result(after the SNF calculation) for heatmap
rownames(fusion_result)=rownames(dist_sci2015)
colnames(fusion_result)=rownames(dist_sci2015)
for (i in 4:34)
{
cluster_group =spectralClustering(fusion_result,i)
connectivity_num=c(connectivity_num,connectivity(distance = 1-fusion_result,clusters = cluster_group))
dunn_num=c(dunn_num,dunn(distance = 1-fusion_result,clusters = cluster_group))
}
twoord.plot(lx=c(3:33),ly=connectivity_num,rx=c(3:33),ry=dunn_num
,xlim = c(3,33),lylim = c(40,220),rylim = c(0.74,0.94),lcol = "red",rcol = "blue"
,xlab = "Cluster Number",ylab = "Connectivity Index",rylab = "Dunn Index"
,main = "Cluster Validity",type = c("b","b"),lwd=2)
connectivity_num
